 PostgreSQL database schema 
### 1. Users Table

**src/models/user.js**
```javascript name=src/models/user.js
const { DataTypes } = require('sequelize');
const { sequelize } = require('../config/database');

const User = sequelize.define('User', {
  id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true },
  name: { type: DataTypes.STRING, allowNull: false },
  email: { type: DataTypes.STRING, allowNull: false, unique: true },
  role: { type: DataTypes.ENUM('Learner', 'Mentor', 'Admin'), allowNull: false },
  passwordHash: { type: DataTypes.STRING, allowNull: false },
  tokenBalance: { type: DataTypes.INTEGER, defaultValue: 0 },
});

module.exports = User;
```

### 2. Skills Table

**src/models/skill.js**
```javascript name=src/models/skill.js
const { DataTypes } = require('sequelize');
const { sequelize } = require('../config/database');
const User = require('./user');

const Skill = sequelize.define('Skill', {
  id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true },
  title: { type: DataTypes.STRING, allowNull: false },
  category: { type: DataTypes.STRING, allowNull: false },
  description: { type: DataTypes.TEXT, allowNull: false },
  mentorId: { type: DataTypes.INTEGER, references: { model: User, key: 'id' }, allowNull: false },
  priceInTokens: { type: DataTypes.INTEGER, allowNull: false },
});

Skill.belongsTo(User, { as: 'mentor', foreignKey: 'mentorId' });

module.exports = Skill;
```

### 3. Bookings Table

**src/models/booking.js**
```javascript name=src/models/booking.js
const { DataTypes } = require('sequelize');
const { sequelize } = require('../config/database');
const User = require('./user');
const Skill = require('./skill');

const Booking = sequelize.define('Booking', {
  id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true },
  userId: { type: DataTypes.INTEGER, references: { model: User, key: 'id' }, allowNull: false },
  mentorId: { type: DataTypes.INTEGER, references: { model: User, key: 'id' }, allowNull: false },
  skillId: { type: DataTypes.INTEGER, references: { model: Skill, key: 'id' }, allowNull: false },
  date: { type: DataTypes.DATE, allowNull: false },
  status: { type: DataTypes.STRING, allowNull: false },
});

Booking.belongsTo(User, { as: 'user', foreignKey: 'userId' });
Booking.belongsTo(User, { as: 'mentor', foreignKey: 'mentorId' });
Booking.belongsTo(Skill, { as: 'skill', foreignKey: 'skillId' });

module.exports = Booking;
```

### 4. Transactions Table

**src/models/transaction.js**
```javascript name=src/models/transaction.js
const { DataTypes } = require('sequelize');
const { sequelize } = require('../config/database');
const User = require('./user');

const Transaction = sequelize.define('Transaction', {
  id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true },
  userId: { type: DataTypes.INTEGER, references: { model: User, key: 'id' }, allowNull: false },
  type: { type: DataTypes.ENUM('Earn', 'Spend'), allowNull: false },
  amount: { type: DataTypes.INTEGER, allowNull: false },
  timestamp: { type: DataTypes.DATE, defaultValue: DataTypes.NOW },
});

Transaction.belongsTo(User, { as: 'user', foreignKey: 'userId' });

module.exports = Transaction;
```

### 5. Messages Table

**src/models/message.js**
```javascript name=src/models/message.js
const { DataTypes } = require('sequelize');
const { sequelize } = require('../config/database');
const User = require('./user');

const Message = sequelize.define('Message', {
  id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true },
  senderId: { type: DataTypes.INTEGER, references: { model: User, key: 'id' }, allowNull: false },
  receiverId: { type: DataTypes.INTEGER, references: { model: User, key: 'id' }, allowNull: false },
  content: { type: DataTypes.TEXT, allowNull: false },
  timestamp: { type: DataTypes.DATE, defaultValue: DataTypes.NOW },
});

Message.belongsTo(User, { as: 'sender', foreignKey: 'senderId' });
Message.belongsTo(User, { as: 'receiver', foreignKey: 'receiverId' });

module.exports = Message;
```

### 6. Notifications Table

**src/models/notification.js**
```javascript name=src/models/notification.js
const { DataTypes } = require('sequelize');
const { sequelize } = require('../config/database');
const User = require('./user');

const Notification = sequelize.define('Notification', {
  id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true },
  userId: { type: DataTypes.INTEGER, references: { model: User, key: 'id' }, allowNull: false },
  type: { type: DataTypes.ENUM('Booking', 'Chat', 'Token'), allowNull: false },
  readStatus: { type: DataTypes.BOOLEAN, defaultValue: false },
});

Notification.belongsTo(User, { as: 'user', foreignKey: 'userId' });

module.exports = Notification;
```

### Migrations

Create migration files for each model:

**migrations/202504010001-create-user.js**
```javascript name=migrations/202504010001-create-user.js
module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Users', {
      id: { type: Sequelize.INTEGER, autoIncrement: true, primaryKey: true },
      name: { type: Sequelize.STRING, allowNull: false },
      email: { type: Sequelize.STRING, allowNull: false, unique: true },
      role: { type: Sequelize.ENUM('Learner', 'Mentor', 'Admin'), allowNull: false },
      passwordHash: { type: Sequelize.STRING, allowNull: false },
      tokenBalance: { type: Sequelize.INTEGER, defaultValue: 0 },
      createdAt: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
      updatedAt: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
    });
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Users');
  },
};
```

**migrations/202504010002-create-skill.js**
```javascript name=migrations/202504010002-create-skill.js
module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Skills', {
      id: { type: Sequelize.INTEGER, autoIncrement: true, primaryKey: true },
      title: { type: Sequelize.STRING, allowNull: false },
      category: { type: Sequelize.STRING, allowNull: false },
      description: { type: Sequelize.TEXT, allowNull: false },
      mentorId: { type: Sequelize.INTEGER, allowNull: false, references: { model: 'Users', key: 'id' } },
      priceInTokens: { type: Sequelize.INTEGER, allowNull: false },
      createdAt: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
      updatedAt: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
    });
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Skills');
  },
};
```

**migrations/202504010003-create-booking.js**
```javascript name=migrations/202504010003-create-booking.js
module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Bookings', {
      id: { type: Sequelize.INTEGER, autoIncrement: true, primaryKey: true },
      userId: { type: Sequelize.INTEGER, allowNull: false, references: { model: 'Users', key: 'id' } },
      mentorId: { type: Sequelize.INTEGER, allowNull: false, references: { model: 'Users', key: 'id' } },
      skillId: { type: Sequelize.INTEGER, allowNull: false, references: { model: 'Skills', key: 'id' } },
      date: { type: Sequelize.DATE, allowNull: false },
      status: { type: Sequelize.STRING, allowNull: false },
      createdAt: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
      updatedAt: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
    });
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Bookings');
  },
};
```

**migrations/202504010004-create-transaction.js**
```javascript name=migrations/202504010004-create-transaction.js
module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Transactions', {
      id: { type: Sequelize.INTEGER, autoIncrement: true, primaryKey: true },
      userId: { type: Sequelize.INTEGER, allowNull: false, references: { model: 'Users', key: 'id' } },
      type: { type: Sequelize.ENUM('Earn', 'Spend'), allowNull: false },
      amount: { type: Sequelize.INTEGER, allowNull: false },
      timestamp: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
      createdAt: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
      updatedAt: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
    });
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Transactions');
  },
};
```

**migrations/202504010005-create-message.js**
```javascript name=migrations/202504010005-create-message.js
module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Messages', {
      id: { type: Sequelize.INTEGER, autoIncrement: true, primaryKey: true },
      senderId: { type: Sequelize.INTEGER, allowNull: false, references: { model: 'Users', key: 'id' } },
      receiverId: { type: Sequelize.INTEGER, allowNull: false, references: { model: 'Users', key: 'id' } },
      content: { type: Sequelize.TEXT, allowNull: false },
      timestamp: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
      createdAt: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
      updatedAt: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
    });
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Messages');
  },
};
```

**migrations/202504010006-create-notification.js**
```javascript name=migrations/202504010006-create-notification.js
module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Notifications', {
      id: { type: Sequelize.INTEGER, autoIncrement: true, primaryKey: true },
      userId: { type: Sequelize.INTEGER, allowNull: false, references: { model: 'Users', key: 'id' } },
      type: { type: Sequelize.ENUM('Booking', 'Chat', 'Token'), allowNull: false },
      readStatus: { type: Sequelize.BOOLEAN, defaultValue: false },
      createdAt: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
      updatedAt: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
    });
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Notifications');
  },
};
```

### Seed Scripts

Create seed scripts to populate the database with initial data:

**seeders/202504010001-seed-users.js**
```javascript name=seeders/202504010001-seed-users.js
module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.bulkInsert('Users', [
      { name: 'John Doe', email: 'john@example.com', role: 'Learner', passwordHash: 'hashedpassword', tokenBalance: 100, createdAt: new Date(), updatedAt: new Date() },
      { name: 'Jane Smith', email: 'jane@example.com', role: 'Mentor', passwordHash: 'hashedpassword', tokenBalance: 200, createdAt: new Date(), updatedAt: new Date() },
    ]);
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.bulkDelete('Users', null, {});
  },
};
```

**seeders/202504010002-seed-skills.js**
```javascript name=seeders/202504010002-seed-skills.js
module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.bulkInsert('Skills', [
      { title: 'JavaScript Basics', category: 'Programming', description: 'Learn the basics of JavaScript', mentorId: 2, priceInTokens: 50, createdAt: new Date(), updatedAt: new Date() },
      { title: 'Advanced Python', category: 'Programming', description: 'Master advanced Python concepts', mentorId: 2, priceInTokens: 100, createdAt: new Date(), updatedAt: new Date() },
    ]);
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.bulkDelete('Skills', null, {});
  },
};
```

This should set up your PostgreSQL database schema for SkillSphere using Sequelize ORM, along with migration and seed scripts. 