# Initialize a new Node.js project
mkdir SkillSphere
cd SkillSphere
npm init -y

# Install necessary dependencies
npm install express sequelize pg pg-hstore jsonwebtoken bcryptjs dotenv passport passport-jwt passport-google-oauth20 passport-facebook passport-linkedin-oauth2 socket.io nodemailer express-rate-limit morgan swagger-jsdoc swagger-ui-express

# Install development dependencies
npm install --save-dev nodemon eslint

mkdir src
mkdir src/config
mkdir src/controllers
mkdir src/models
mkdir src/routes
mkdir src/middleware
mkdir src/services
mkdir src/utils
touch src/app.js
touch src/server.js
touch src/config/config.js
touch src/config/database.js
touch src/routes/index.js
touch src/routes/auth.js
touch src/routes/skills.js
touch src/routes/bookings.js
touch src/routes/transactions.js
touch src/routes/chat.js
touch src/routes/notifications.js
touch src/middleware/auth.js
touch src/middleware/rateLimiter.js
touch src/utils/logger.js
touch src/utils/validator.js
touch src/services/emailService.js
touch src/services/socketService.js
touch src/controllers/authController.js
touch src/controllers/skillsController.js
touch src/controllers/bookingsController.js
touch src/controllers/transactionsController.js
touch src/controllers/chatController.js
touch src/controllers/notificationsController.js

const express = require('express');
const morgan = require('morgan');
const rateLimiter = require('./middleware/rateLimiter');
const authRoutes = require('./routes/auth');
const skillRoutes = require('./routes/skills');
const bookingRoutes = require('./routes/bookings');
const transactionRoutes = require('./routes/transactions');
const chatRoutes = require('./routes/chat');
const notificationRoutes = require('./routes/notifications');
const { sequelize } = require('./config/database');
require('dotenv').config();

const app = express();

// Middleware
app.use(morgan('dev'));
app.use(express.json());
app.use(rateLimiter);

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/skills', skillRoutes);
app.use('/api/bookings', bookingRoutes);
app.use('/api/transactions', transactionRoutes);
app.use('/api/chat', chatRoutes);
app.use('/api/notifications', notificationRoutes);

// Database connection
sequelize.sync()
  .then(() => {
    console.log('Database connected successfully.');
  })
  .catch((err) => {
    console.error('Unable to connect to the database:', err);
  });
module.exports = app;

const app = require('./app');
const http = require('http');
const socketService = require('./services/socketService');
const server = http.createServer(app);
const io = socketService.init(server);
const PORT = process.env.PORT || 5000;
server.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
require('dotenv').config();
module.exports = {
  jwtSecret: process.env.JWT_SECRET,
  oauth: {
    google: {
      clientID: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
    },
    facebook: {
      clientID: process.env.FACEBOOK_CLIENT_ID,
      clientSecret: process.env.FACEBOOK_CLIENT_SECRET,
    },
    linkedin: {
      clientID: process.env.LINKEDIN_CLIENT_ID,
      clientSecret: process.env.LINKEDIN_CLIENT_SECRET,
    },
  },
};
const { Sequelize } = require('sequelize');
require('dotenv').config();
const sequelize = new Sequelize(process.env.DATABASE_URL, {
  dialect: 'postgres',
  logging: false,
});
module.exports = { sequelize };

const jwt = require('jsonwebtoken');
const { jwtSecret } = require('../config/config');
module.exports = (req, res, next) => {
  const token = req.header('Authorization').replace('Bearer ', '');
  if (!token) {
    return res.status(401).send({ error: 'Access denied. No token provided.' });
  }
  try {
    const decoded = jwt.verify(token, jwtSecret);
    req.user = decoded;
    next();
  } catch (ex) {
    res.status(400).send({ error: 'Invalid token.' });
  }
};

const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { User } = require('../models');
const { jwtSecret } = require('../config/config');
const register = async (req, res) => {
  const { name, email, password, role } = req.body;
  const user = new User({ name, email, password, role });
  user.password = await bcrypt.hash(password, 10);
  await user.save();
  const token = jwt.sign({ id: user.id, role: user.role }, jwtSecret);
  res.status(201).send({ token });
};
const login = async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ where: { email } });
  if (!user || !(await bcrypt.compare(password, user.password))) {
    return res.status(400).send({ error: 'Invalid email or password.' });
  }
  const token = jwt.sign({ id: user.id, role: user.role }, jwtSecret);
  res.send({ token });
};
module.exports = { register, login };

const express = require('express');
const { register, login } = require('../controllers/authController');
const router = express.Router();
router.post('/register', register);
router.post('/login', login);
module.exports = router;

const { DataTypes } = require('sequelize');
const { sequelize } = require('../config/database');
const User = sequelize.define('User', {
  name: { type: DataTypes.STRING, allowNull: false },
  email: { type: DataTypes.STRING, allowNull: false, unique: true },
  password: { type: DataTypes.STRING, allowNull: false },
  role: { type: DataTypes.ENUM('Learner', 'Mentor', 'Admin'), allowNull: false },
});
module.exports = User;
module.exports = (roles) => {
  return (req, res, next) => {
    if (!roles.includes(req.user.role)) {
      return res.status(403).send({ error: 'Access denied.' });
    }
    next();
  };
};

const { Skill } = require('../models');
const getSkills = async (req, res) => {
  const skills = await Skill.findAll();
  res.send(skills);
};
const addSkill = async (req, res) => {
  const skill = await Skill.create(req.body);
  res.status(201).send(skill);
};
const updateSkill = async (req, res) => {
  const skill = await Skill.findByPk(req.params.id);
  if (!skill) {
    return res.status(404).send({ error: 'Skill not found.' });
  }
  await skill.update(req.body);
  res.send(skill);
};
const deleteSkill = async (req, res) => {
  const skill = await Skill.findByPk(req.params.id);
  if (!skill) {
    return res.status(404).send({ error: 'Skill not found.' });
  }
  await skill.destroy();
  res.send({ message: 'Skill deleted.' });
};
module.exports = { getSkills, addSkill, updateSkill, deleteSkill };

const express = require('express');
const { getSkills, addSkill, updateSkill, deleteSkill } = require('../controllers/skillsController');
const auth = require('../middleware/auth');
const rbac = require('../middleware/rbac');
const router = express.Router();
router.get('/', getSkills);
router.post('/', auth, rbac(['Mentor', 'Admin']), addSkill);
router.put('/:id', auth, rbac(['Mentor', 'Admin']), updateSkill);
router.delete('/:id', auth, rbac(['Mentor', 'Admin']), deleteSkill);
module.exports = router;

const { Booking } = require('../models');
const getBookings = async (req, res) => {
  const bookings = await Booking.findAll();
  res.send(bookings);
};
const addBooking = async (req, res) => {
  const booking = await Booking.create(req.body);
  res.status(201).send(booking);
};
const updateBooking = async (req, res) => {
  const booking = await Booking.findByPk(req.params.id);
  if (!booking) {
    return res.status(404).send({ error: 'Booking not found.' });
  }
  await booking.update(req.body);
  res.send(booking);
};
const deleteBooking = async (req, res) => {
  const booking = await Booking.findByPk(req.params.id);
  if (!booking) {
    return res.status(404).send({ error: 'Booking not found.' });
  }
  await booking.destroy();
  res.send({ message: 'Booking deleted.' });
};
module.exports = { getBookings, addBooking, updateBooking, deleteBooking };

const express = require('express');
const { getBookings, addBooking, updateBooking, deleteBooking } = require('../controllers/bookingsController');
const auth = require('../middleware/auth');
const router = express.Router();
router.get('/', auth, getBookings);
router.post('/', auth, addBooking);
router.put('/:id', auth, updateBooking);
router.delete('/:id', auth, deleteBooking);
module.exports = router;

const { Transaction } = require('../models');
const getTransactions = async (req, res) => {
  const transactions = await Transaction.findAll();
  res.send(transactions);
};
const addTransaction = async (req, res) => {
  const transaction = await Transaction.create(req.body);
  res.status(201).send(transaction);
};
module.exports = { getTransactions, addTransaction };

const express = require('express');
const { getTransactions, addTransaction } = require('../controllers/transactionsController');
const auth = require('../middleware/auth');
const router = express.Router();
router.get('/', auth, getTransactions);
router.post('/', auth, addTransaction);
module.exports = router;

const socketIo = require('socket.io');
let io;
const init = (server) => {
  io = socketIo(server);
  io.on('connection', (socket) => {
    console.log('New client connected');
    socket.on('message', (data) => {
      io.emit('message', data);
    });
    socket.on('disconnect', () => {
      console.log('Client disconnected');
    });
  });
  return io;
};
module.exports = { init };

const sendMessage = (req, res) => {
  const { io } = require('../services/socketService');
  io.emit('message', req.body);
  res.send({ message: 'Message sent.' });
};
module.exports = { sendMessage };

const express = require('express');
const { sendMessage } = require('../controllers/chatController');
const auth = require('../middleware/auth');
const router = express.Router();
router.post('/send', auth, sendMessage);
module.exports = router;

const nodemailer = require('nodemailer');
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});
const sendEmail = (to, subject, text) => {
  const mailOptions = {
    from: process.env.EMAIL_USER,
    to,
    subject,
    text,
  };
transporter.sendMail(mailOptions, (error, info) => {
    if (error) {
      console.error('Error sending email:', error);
    } else {
      console.log('Email sent:', info.response);
    }
  });
};
module.exports = { sendEmail };

const { sendEmail } = require('../services/emailService');
const { io } = require('../services/socketService');
const sendNotification = (req, res) => {
  const { type, recipient, message } = req.body;
  if (type === 'email') {
    sendEmail(recipient, 'Notification', message);
  } else if (type === 'websocket') {
    io.emit('notification', { recipient, message });
  }
  res.send({ message: 'Notification sent.' });
};
module.exports = { sendNotification };

const express = require('express');
const { sendNotification } = require('../controllers/notificationsController');
const auth = require('../middleware/auth');
const router = express.Router();
router.post('/send', auth, sendNotification);
module.exports = router;

const { DataTypes } = require('sequelize');
const { sequelize } = require('../config/database');
const Skill = sequelize.define('Skill', {
  name: { type: DataTypes.STRING, allowNull: false },
  description: { type: DataTypes.TEXT, allowNull: false },
});
module.exports = Skill;

const { DataTypes } = require('sequelize');
const { sequelize } = require('../config/database');
const Booking = sequelize.define('Booking', {
  userId: { type: DataTypes.INTEGER, allowNull: false },
  mentorId: { type: DataTypes.INTEGER, allowNull: false },
  skillId: { type: DataTypes.INTEGER, allowNull: false },
  date: { type: DataTypes.DATE, allowNull: false },
  status: { type: DataTypes.STRING, allowNull: false },
});
module.exports = Booking;

const { DataTypes } = require('sequelize');
const { sequelize } = require('../config/database');
const Transaction = sequelize.define('Transaction', {
  userId: { type: DataTypes.INTEGER, allowNull: false },
  amount: { type: DataTypes.INTEGER, allowNull: false },
  type: { type: DataTypes.STRING, allowNull: false },
});
module.exports = Transaction;

const { body, validationResult } = require('express-validator');
const validate = (validations) => {
  return async (req, res, next) => {
    await Promise.all(validations.map((validation) => validation.run(req)));
    const errors = validationResult(req);
    if (errors.isEmpty()) {
      return next();
    }
    res.status(400).json({ errors: errors.array() });
  };
};
module.exports = validate;

const rateLimit = require('express-rate-limit');
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: 'Too many requests from this IP, please try again later.',
});
module.exports = limiter;

const swaggerJsDoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
const swaggerOptions = {
  swaggerDefinition: {
    openapi: '3.0.0',
    info: {
      title: 'SkillSphere API',
      version: '1.0.0',
      description: 'API documentation for SkillSphere',
    },
    servers: [
      {
        url: 'http://localhost:5000',
      },
    ],
  },
  apis: ['./src/routes/*.js'],
};
const swaggerDocs = swaggerJsDoc(swaggerOptions);
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocs));


