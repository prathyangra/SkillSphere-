import axios from 'axios';
const API_URL = 'http://localhost:5000/api/auth';
const register = async (name, email, password) => {
  const response = await axios.post(`${API_URL}/register`, {
    name,
    email,
    password,
  });
  return response.data;
};
const login = async (email, password) => {
  const response = await axios.post(`${API_URL}/login`, {
    email,
    password,
  });
  if (response.data.token) {
    localStorage.setItem('token', response.data.token);
  }
  return response.data;
};
const logout = () => {
  localStorage.removeItem('token');
};
const getCurrentUser = () => {
  return localStorage.getItem('token');
};
export default {
  register,
  login,
  logout,
  getCurrentUser,
};

import axios from 'axios';
const API_URL = 'http://localhost:5000/api/skills';
const getSkills = async () => {
  const response = await axios.get(API_URL);
  return response.data;
};
const addSkill = async (skill) => {
  const token = localStorage.getItem('token');
  const response = await axios.post(API_URL, skill, {
    headers: { Authorization: `Bearer ${token}` },
  });
  return response.data;
};
const updateSkill = async (id, skill) => {
  const token = localStorage.getItem('token');
  const response = await axios.put(`${API_URL}/${id}`, skill, {
    headers: { Authorization: `Bearer ${token}` },
  });
  return response.data;
};
export default {
  getSkills,
  addSkill,
  updateSkill,
};

import axios from 'axios';
const API_URL = 'http://localhost:5000/api/bookings';
const createBooking = async (booking) => {
  const token = localStorage.getItem('token');
  const response = await axios.post(API_URL, booking, {
    headers: { Authorization: `Bearer ${token}` },
  });
  return response.data;
};
const getBookings = async () => {
  const token = localStorage.getItem('token');
  const response = await axios.get(API_URL, {
    headers: { Authorization: `Bearer ${token}` },
  });
  return response.data;
};
export default {
  createBooking,
  getBookings,
};

import axios from 'axios';
const API_URL = 'http://localhost:5000/api/transactions';
const checkBalance = async () => {
  const token = localStorage.getItem('token');
  const response = await axios.get(API_URL, {
    headers: { Authorization: `Bearer ${token}` },
  });
  return response.data.balance;
};
const earnTokens = async (amount) => {
  const token = localStorage.getItem('token');
  const response = await axios.post(
    API_URL,
    { type: 'Earn', amount },
    {
      headers: { Authorization: `Bearer ${token}` },
    }
  );
  return response.data;
};
const spendTokens = async (amount) => {
  const token = localStorage.getItem('token');
  const response = await axios.post(
    API_URL,
    { type: 'Spend', amount },
    {
      headers: { Authorization: `Bearer ${token}` },
    }
  );
  return response.data;
};
export default {
  checkBalance,
  earnTokens,
  spendTokens,
};

import { io } from 'socket.io-client';
const SOCKET_URL = 'http://localhost:5000';
const socket = io(SOCKET_URL);
const sendMessage = (message) => {
  socket.emit('message', message);
};
const onMessage = (callback) => {
  socket.on('message', (message) => {
    callback(message);
  });
};
const disconnect = () => {
  socket.disconnect();
};
export default {
  sendMessage,
  onMessage,
  disconnect,
};

import axios from 'axios';
import { io } from 'socket.io-client';
const API_URL = 'http://localhost:5000/api/notifications';
const SOCKET_URL = 'http://localhost:5000';
const getNotifications = async () => {
  const token = localStorage.getItem('token');
  const response = await axios.get(API_URL, {
    headers: { Authorization: `Bearer ${token}` },
  });
  return response.data;
};
const socket = io(SOCKET_URL);
const onNotification = (callback) => {
  socket.on('notification', (notification) => {
    callback(notification);
  });
};
const disconnect = () => {
  socket.disconnect();
};
export default {
  getNotifications,
  onNotification,
  disconnect,
};
